import os
import random
import time
import platform
import timm

import tqdm

import numpy as np
import matplotlib.pyplot as plt
from sklearn import metrics

import torch
import torch.nn.functional as F
from torch import nn, optim
# import torch.nn as nn 
# import torch.optim as optim 
from torch.optim import lr_scheduler 

from torchvision import transforms, models, datasets, utils
from torch.utils.data import random_split

SEED = 42

random.seed(SEED)
np.random.seed(SEED)

torch.manual_seed(SEED)
torch.cuda.manual_seed(SEED)

torch.backends.cudnn.benchmark = False
torch.backends.cudnn.deterministic = True

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print('\nDevice: {0}'.format(DEVICE))

BATCH_SIZE = 32
EPOCHS = 10
WORKERS = 4

LR = 0.001
MM = 0.9

MODEL_NAME = 'vgg16'

def get_cnn_data_loader(dataset):
    train_size = int(0.8 * len(dataset))
    test_size = len(dataset) - train_size
    train_dataset, test_dataset = random_split(dataset, [train_size, test_size])
    train_loader = torch.utils.data.DataLoader(train_dataset,
                                           batch_size=BATCH_SIZE,
                                           shuffle=False,
                                           num_workers=WORKERS)

    test_loader = torch.utils.data.DataLoader(test_dataset,
                                            batch_size=BATCH_SIZE,
                                            shuffle=False,
                                            num_workers=WORKERS)
    
    return train_loader, test_loader

def create_model(classes):
    classes_length = len(classes)
    model = timm.create_model(MODEL_NAME, pretrained=True, num_classes=classes_length)
    
    num_features = model.classifier[-1].in_features
    model.classifier[-1] = nn.Linear(num_features, classes_length)
    
    if DEVICE.type == 'cuda':
        model = model.cuda()
    
    print("MODEL", model)
    return model

def initialize_training(model, train_loader, test_loader):
    loss_fn = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=LR, momentum=0.9, weight_decay=0.0005)
    
    for epoch in range(EPOCHS):
        model.train()
        train_loader.set_epoch(epoch)
        
        running_loss = 0.0
        correct = 0
        total = 0
        
        for idx, batch in enumerate(tqdm(train_loader, total=len(train_loader))):
            features, labels = batch[0].to(DEVICE), batch[1].to(DEVICE)
            
            optimizer.zero_grad()
            
            torch.set_grad_enabled(True)
            
            outputs = model(features)
            loss = loss_fn(outputs, labels)
            
            loss.backward()
            optimizer.step()
            
            running_loss += loss.item()
            
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            
            correct += (predicted == labels).sum().item()
            
            if idx % 10 == 0:
                print("TRAIN: running_loss", running_loss/(idx+1))
                print("TRAIN: running_accuracy", correct/total)
                print("TRAIN: current epoch", epoch)
                
            if idx % 20 == 0:
                optimizer.param_groups[0]['lr'] = optimizer.param_groups[0]['lr'] / 10
                
        epoch_loss = running_loss / len(train_loader)
        epoch_accuracy = correct / total
        
        
        model.eval()
        
        test_loss = 0.0
        correct_test = 0
        total_test = 0
        
        for idx, batch in enumerate(tqdm(test_loader, total=len(test_loader))):
            features, labels = batch[0].to(DEVICE), batch[1].to(DEVICE)

            preds = model(features)
            loss = loss_fn(preds, labels)
            test_loss += loss.item()

            _, predicted = torch.max(preds, 1)
            total_test += labels.size(0)
            correct_test += (predicted == labels).sum().item()
            
            if idx % 10 == 0:
                print("TEST: running_loss", test_loss/(idx+1))
                print("TEST: running_accuracy", correct_test/total_test)
        
        average_test_loss = test_loss / len(test_loader)
        accuracy_test = correct_test / total_test 
        
        
            
        


    
    



