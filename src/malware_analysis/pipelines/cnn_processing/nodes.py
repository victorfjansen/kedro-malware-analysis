from torch.utils.data import Dataset
from PIL import Image
from torchvision import transforms

IMG_DIMS=(256,256)

transform = transforms.Compose([
    transforms.Resize(size=IMG_DIMS),
    transforms.ToTensor(),                                     # Convert image to Tensor
])

class DictImageDataset(Dataset):
    def __init__(self, image_dict, transform=None):
        """
        :param image_dict: Dictionary where keys are categories (labels) and values are lists of PIL images.
        :param transform: Optional transform to be applied on a sample.
        """
        self.image_dict = image_dict
        self.transform = transform
        self.images = []
        self.labels = []
        self.labels_set = None
        self.class_to_idx = {}  # Dictionary to map class names to indices
        self.classes = []  # List to hold the class names

        # Populate images and labels
        self._load_dataset()

    def _load_dataset(self):
        """
        Loads images and corresponding labels from the provided dictionary.
        """
        for class_idx, (class_name, image_list) in enumerate(self.image_dict.items()):
            self.class_to_idx[class_name] = class_idx  # Map class name to index
            self.classes.append(class_name)  # Store class name
            for image in image_list:
                if isinstance(image, Image.Image):  # Check if the object is a PIL image
                    self.images.append(image)
                    self.labels.append(class_idx)

        self.labels_set = set(self.labels)

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        """
        Retrieves the image and its corresponding label.
        :param idx: Index of the image.
        :return: Tuple (image, label).
        """
        image = self.images[idx]
        label = self.labels[idx]

        if self.transform:
            image = self.transform(image)

        return image, label

def preprocess_images_with_label_classification(benign_images_from_files):
    # Juntar imagens com classificações
    print("BENIGN IMAGES", benign_images_from_files, len(benign_images_from_files['non_malware']))
    return benign_images_from_files

def build_dataset_with_processed_images(images_from_exe):
    images_dataset = DictImageDataset(images_from_exe, transform=transform)
    return images_dataset, images_dataset.labels_set
